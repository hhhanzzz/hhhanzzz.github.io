import{_ as a,o as e,c as l,S as i}from"./chunks/framework.3ac0968e.js";const q=JSON.parse('{"title":"小程序学习总结","description":"","frontmatter":{"title":"小程序学习总结","date":"2023-04-07","sidebar":"auto","categories":["前端"]},"headers":[],"relativePath":"fe/miniprogram/index.md","filePath":"fe/miniprogram/index.md","lastUpdated":null}'),t={name:"fe/miniprogram/index.md"},r=i('<h1 id="小程序学习总结" tabindex="-1">小程序学习总结 <a class="header-anchor" href="#小程序学习总结" aria-label="Permalink to &quot;小程序学习总结&quot;">​</a></h1><h2 id="小程序起步" tabindex="-1">小程序起步 <a class="header-anchor" href="#小程序起步" aria-label="Permalink to &quot;小程序起步&quot;">​</a></h2><ul><li>注册小程序开发帐号</li><li>安装开发者工具</li><li>小程序的架构模型 <img src="https://res.wx.qq.com/wxdoc/dist/assets/img/4-1.ad156d1c.png" alt="小程序架构模型"></li></ul><h2 id="小程序代码的构成" tabindex="-1">小程序代码的构成 <a class="header-anchor" href="#小程序代码的构成" aria-label="Permalink to &quot;小程序代码的构成&quot;">​</a></h2><h3 id="小程序项目结构" tabindex="-1">小程序项目结构 <a class="header-anchor" href="#小程序项目结构" aria-label="Permalink to &quot;小程序项目结构&quot;">​</a></h3><ul><li>pages 用来存放所有小程序的页面</li><li>utils 用来存放工具性质的模块（例如：格式化时间的自定义模块）</li><li>app.js 小程序项目的入口文件</li><li>app.json 小程序项目的全局配置文件</li><li>app.wxss 小程序项目的全局样式文件</li><li>project.config.json 项目的配置文件</li><li>sitemap.json 用来配置小程序及其页面是否允许被微信索引</li></ul><p>小程序官方建议把所有小程序的页面，都存放在 pages 目录中，以单独的文件夹存在 其中，每个页面由 4 个基本文件组成，它们分别是：</p><ul><li>js 文件（页面的脚本文件，存放页面的数据、事件处理函数等）</li><li>json 文件（当前页面的配置文件，配置窗口的外观、表现等）</li><li>wxml 文件（页面的模板结构文件）</li><li>wxss 文件（当前页面的样式表文件）</li></ul><h3 id="app函数" tabindex="-1">App函数 <a class="header-anchor" href="#app函数" aria-label="Permalink to &quot;App函数&quot;">​</a></h3><p><strong>每个小程序都需要在 app.js 中调用 App 函数 注册小程序实例</strong></p><p>注册App时，我们一般会做什么</p><ul><li>判断小程序的进入场景</li><li>监听生命周期函数，在生命周期中执行对应的业务逻辑，比如在某个生命周期函数中进行登录操作或者请求网络数据</li><li>因为App()实例只有一个，并且是全局共享的（单例对象），所以我们可以将一些共享数据放在这里</li></ul><h3 id="page函数" tabindex="-1">Page函数 <a class="header-anchor" href="#page函数" aria-label="Permalink to &quot;Page函数&quot;">​</a></h3><p><strong>小程序中的每个页面, 都有一个对应的js文件, 其中调用Page函数注册页面示例</strong></p><p>注册Page页面时，我们一般会做什么</p><ul><li>在生命周期函数中发送网络请求，从服务器获取数据</li><li>初始化一些数据，以方便被wxml引用展示</li><li>监听wxml中的事件，绑定对应的事件函数</li><li>其他一些监听（比如页面滚动、上拉刷新、下拉加载更多等）</li></ul><h2 id="小程序内置组件" tabindex="-1">小程序内置组件 <a class="header-anchor" href="#小程序内置组件" aria-label="Permalink to &quot;小程序内置组件&quot;">​</a></h2><h3 id="常用的视图容器类组件" tabindex="-1">常用的视图容器类组件 <a class="header-anchor" href="#常用的视图容器类组件" aria-label="Permalink to &quot;常用的视图容器类组件&quot;">​</a></h3><ul><li>view</li><li>scroll-view</li><li>swiper 和 swiper-item</li></ul><h3 id="常用的基础内容组件" tabindex="-1">常用的基础内容组件 <a class="header-anchor" href="#常用的基础内容组件" aria-label="Permalink to &quot;常用的基础内容组件&quot;">​</a></h3><ul><li>text</li><li>rich-text</li></ul><h3 id="其它常用组件" tabindex="-1">其它常用组件 <a class="header-anchor" href="#其它常用组件" aria-label="Permalink to &quot;其它常用组件&quot;">​</a></h3><ul><li>button</li><li>image</li><li>navigator</li></ul><h3 id="组件共同的属性" tabindex="-1">组件共同的属性 <a class="header-anchor" href="#组件共同的属性" aria-label="Permalink to &quot;组件共同的属性&quot;">​</a></h3><h2 id="模板语法" tabindex="-1">模板语法 <a class="header-anchor" href="#模板语法" aria-label="Permalink to &quot;模板语法&quot;">​</a></h2><h3 id="小胡子语法" tabindex="-1">小胡子语法 <a class="header-anchor" href="#小胡子语法" aria-label="Permalink to &quot;小胡子语法&quot;">​</a></h3><h3 id="指令语法" tabindex="-1">指令语法 <a class="header-anchor" href="#指令语法" aria-label="Permalink to &quot;指令语法&quot;">​</a></h3><ul><li>wx:if - wx:elif - wx:else</li><li>wx:for wx:key</li></ul><h3 id="block标签" tabindex="-1">block标签 <a class="header-anchor" href="#block标签" aria-label="Permalink to &quot;block标签&quot;">​</a></h3><h2 id="事件处理" tabindex="-1">事件处理 <a class="header-anchor" href="#事件处理" aria-label="Permalink to &quot;事件处理&quot;">​</a></h2><h3 id="事件处理-1" tabindex="-1">事件处理 <a class="header-anchor" href="#事件处理-1" aria-label="Permalink to &quot;事件处理&quot;">​</a></h3><ul><li><p>事件是通过bind/catch这个属性绑定在组件上的（和普通的属性写法很相似, 以key=“value”形式）</p></li><li><p>key以bind或catch开头, 从1.5.0版本开始, 可以在bind和catch后加上一个冒号</p></li><li><p>同时在当前页面的Page构造器中定义对应的事件处理函数, 如果没有对应的函数, 触发事件时会报错</p></li><li><p>比如当用户点击该button区域时，达到触发条件生成事件tap，该事件处理函数会被执行，同时还会收到一个事件对象event</p></li><li><p>tap事件、input事件、change事件</p></li><li><p>bind正常绑定事件</p></li><li><p>catch绑定事件可以使其不冒泡</p></li><li><p>capture-bind绑定事件可以使其回调在事件捕获阶段触发</p></li></ul><h2 id="小程序组件化开发" tabindex="-1">小程序组件化开发 <a class="header-anchor" href="#小程序组件化开发" aria-label="Permalink to &quot;小程序组件化开发&quot;">​</a></h2><h3 id="创建并使用一个组件" tabindex="-1">创建并使用一个组件 <a class="header-anchor" href="#创建并使用一个组件" aria-label="Permalink to &quot;创建并使用一个组件&quot;">​</a></h3><h3 id="向组件传递数据-properties" tabindex="-1">向组件传递数据 - properties <a class="header-anchor" href="#向组件传递数据-properties" aria-label="Permalink to &quot;向组件传递数据 - properties&quot;">​</a></h3><h3 id="向组件传递样式-externalclasses" tabindex="-1">向组件传递样式 - externalClasses <a class="header-anchor" href="#向组件传递样式-externalclasses" aria-label="Permalink to &quot;向组件传递样式 - externalClasses&quot;">​</a></h3><h3 id="组件向外传递事件-–-自定义事件" tabindex="-1">组件向外传递事件 – 自定义事件 <a class="header-anchor" href="#组件向外传递事件-–-自定义事件" aria-label="Permalink to &quot;组件向外传递事件 – 自定义事件&quot;">​</a></h3><h3 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽&quot;">​</a></h3><ul><li>默认插槽</li><li>具名插槽</li></ul><h3 id="组件的生命周期" tabindex="-1">组件的生命周期 <a class="header-anchor" href="#组件的生命周期" aria-label="Permalink to &quot;组件的生命周期&quot;">​</a></h3><h2 id="小程序系统api" tabindex="-1">小程序系统API <a class="header-anchor" href="#小程序系统api" aria-label="Permalink to &quot;小程序系统API&quot;">​</a></h2><h3 id="网络请求" tabindex="-1">网络请求 <a class="header-anchor" href="#网络请求" aria-label="Permalink to &quot;网络请求&quot;">​</a></h3><ul><li>wx.request()</li></ul><h3 id="弹窗效果" tabindex="-1">弹窗效果 <a class="header-anchor" href="#弹窗效果" aria-label="Permalink to &quot;弹窗效果&quot;">​</a></h3><p>showToast、showModal、showLoading、showActionSheet</p><h3 id="分享功能" tabindex="-1">分享功能 <a class="header-anchor" href="#分享功能" aria-label="Permalink to &quot;分享功能&quot;">​</a></h3><h3 id="获取设备信息" tabindex="-1">获取设备信息 <a class="header-anchor" href="#获取设备信息" aria-label="Permalink to &quot;获取设备信息&quot;">​</a></h3><p>wx.getSystemInfo()</p><h3 id="获取位置信息" tabindex="-1">获取位置信息 <a class="header-anchor" href="#获取位置信息" aria-label="Permalink to &quot;获取位置信息&quot;">​</a></h3><p>wx.getLocation()</p><h3 id="storage存储" tabindex="-1">Storage存储 <a class="header-anchor" href="#storage存储" aria-label="Permalink to &quot;Storage存储&quot;">​</a></h3><p><span style="color:red;">同步存取数据</span>的方法</p><ul><li>wx.setStorageSync(string key, any data)</li><li>wx.getStorageSync(string key)</li><li>wx.removeStorageSync(string key)</li><li>wx.clearStorageSync()</li></ul><p><span style="color:red;">异步存取数据</span>的方法 wx.setStorage(Object object) wx.getStorage(Object object) wx.removeStorage(Object object) wx.clearStorage(Object object)</p><h3 id="界面跳转" tabindex="-1">界面跳转 <a class="header-anchor" href="#界面跳转" aria-label="Permalink to &quot;界面跳转&quot;">​</a></h3><h3 id="小程序登录" tabindex="-1">小程序登录 <a class="header-anchor" href="#小程序登录" aria-label="Permalink to &quot;小程序登录&quot;">​</a></h3><h2 id="npm包" tabindex="-1">npm包 <a class="header-anchor" href="#npm包" aria-label="Permalink to &quot;npm包&quot;">​</a></h2><p>目前，小程序中已经支持使用 npm 安装第三方包，从而来提高小程序的开发效率。但是，在小程序中使用npm 包有如下 3 个限制：</p><ul><li>不支持依赖于 Node.js 内置库的包</li><li>不支持依赖于浏览器内置对象的包</li><li>不支持依赖于 C++ 插件的包</li></ul><h2 id="小程序云开发" tabindex="-1">小程序云开发 <a class="header-anchor" href="#小程序云开发" aria-label="Permalink to &quot;小程序云开发&quot;">​</a></h2><p>云开发核心技术</p><ul><li>云数据库</li><li>云存储</li><li>云函数</li></ul>',62),o=[r];function h(n,s,d,c,u,p){return e(),l("div",null,o)}const x=a(t,[["render",h]]);export{q as __pageData,x as default};
