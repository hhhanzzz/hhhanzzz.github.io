import{_ as p,E as r,o as c,c as i,k as s,t as e,a,J as o,S as t}from"./chunks/framework.3ac0968e.js";const N=JSON.parse('{"title":"vue基础","description":"","frontmatter":{"title":"vue基础","date":"2023-04-08","sidebar":"auto","categories":["前端"]},"headers":[],"relativePath":"fe/vue/vue2/vue基础.md","filePath":"fe/vue/vue2/vue基础.md","lastUpdated":1692159092000}'),y={name:"fe/vue/vue2/vue基础.md"},u=s("h2",{id:"一、搭建vue开发环境",tabindex:"-1"},[a("一、搭建vue开发环境 "),s("a",{class:"header-anchor",href:"#一、搭建vue开发环境","aria-label":'Permalink to "一、搭建vue开发环境"'},"​")],-1),F=s("ul",null,[s("li",null,"script标签引入"),s("li",null,"下载开发者工具"),s("li",null,"关闭生产提示")],-1),D=s("h2",{id:"二、初识vue",tabindex:"-1"},[a("二、初识vue "),s("a",{class:"header-anchor",href:"#二、初识vue","aria-label":'Permalink to "二、初识vue"'},"​")],-1),h=s("h2",{id:"三、模板语法",tabindex:"-1"},[a("三、模板语法 "),s("a",{class:"header-anchor",href:"#三、模板语法","aria-label":'Permalink to "三、模板语法"'},"​")],-1),d=s("h3",{id:"_1、插值语法",tabindex:"-1"},[a("1、插值语法 "),s("a",{class:"header-anchor",href:"#_1、插值语法","aria-label":'Permalink to "1、插值语法"'},"​")],-1),v=t(`<h3 id="_2、指令语法" tabindex="-1">2、指令语法 <a class="header-anchor" href="#_2、指令语法" aria-label="Permalink to &quot;2、指令语法&quot;">​</a></h3><ul><li>v-bind: 单项数据绑定，v-bind:href=&quot;xxx&quot;或简写为:href=&quot;xxx&quot;，xxx为js表达式</li></ul><h2 id="四、数据绑定" tabindex="-1">四、数据绑定 <a class="header-anchor" href="#四、数据绑定" aria-label="Permalink to &quot;四、数据绑定&quot;">​</a></h2><ul><li>单项数据绑定(v-bind): 数据只能从data流向页面</li><li>双向数据绑定(v-model): 数据不仅能从data流向页面，还可以从页面流向data</li><li>v-model一般应用在表单类元素上，v-model:value 可以简写为v-model，因为v-model默认收集的就是value值</li></ul><h2 id="五、el与data的两种写法" tabindex="-1">五、el与data的两种写法 <a class="header-anchor" href="#五、el与data的两种写法" aria-label="Permalink to &quot;五、el与data的两种写法&quot;">​</a></h2><h3 id="_1、el两种写法" tabindex="-1">1、el两种写法 <a class="header-anchor" href="#_1、el两种写法" aria-label="Permalink to &quot;1、el两种写法&quot;">​</a></h3><ul><li>new Vue时配置el属性</li><li>创建vue实例，随后通过vm.$mount(&#39;#root&#39;)指定el的值，连接模板</li></ul><h3 id="_2、data的两种写法" tabindex="-1">2、data的两种写法 <a class="header-anchor" href="#_2、data的两种写法" aria-label="Permalink to &quot;2、data的两种写法&quot;">​</a></h3><ul><li>对象式、函数式</li><li>组件里必须写函数式</li><li><strong>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是vue实例了</strong></li></ul><h2 id="六、mvvm模型" tabindex="-1">六、MVVM模型 <a class="header-anchor" href="#六、mvvm模型" aria-label="Permalink to &quot;六、MVVM模型&quot;">​</a></h2><ul><li>M——model 数据</li><li>V——view dom或者直白的说成页面</li><li>VM——viewModel Vue实例vm</li></ul><h2 id="七、回顾object-defineproperty方法" tabindex="-1">七、回顾Object.defineproperty方法 <a class="header-anchor" href="#七、回顾object-defineproperty方法" aria-label="Permalink to &quot;七、回顾Object.defineproperty方法&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">value </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">enumerable </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//控制属性是否可以枚举，默认值是false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">writable </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//控制属性是否可以被修改，默认值是false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">configurable </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//控制属性是否可以被删除，默认值是false</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//当有人读取obj的age属性时，get方法(getter)会被调用，返回值作为age的值</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//当有人修改obj的age属性时，set方法(setter)会被调用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="八、数据代理" tabindex="-1">八、数据代理 <a class="header-anchor" href="#八、数据代理" aria-label="Permalink to &quot;八、数据代理&quot;">​</a></h2><p>vue中的数据代理：通过对一个对象代理(vm)对另一个对象中属性的操作(读/写)</p><h2 id="九、事件" tabindex="-1">九、事件 <a class="header-anchor" href="#九、事件" aria-label="Permalink to &quot;九、事件&quot;">​</a></h2><p>v-on:xxx或@xxx绑定事件，其中xxx时事件名, methods</p><h3 id="_1、事件修饰符" tabindex="-1">1、事件修饰符 <a class="header-anchor" href="#_1、事件修饰符" aria-label="Permalink to &quot;1、事件修饰符&quot;">​</a></h3><ul><li>修饰符可同时使用多个</li><li>prevent : 阻止默认事件（常用）</li><li>stop : 阻止事件冒泡（常用）</li><li>once : 事件只触发一次（常用）</li><li>capture : 使用事件的捕获模式</li><li>self : 只有event.target是当前操作的元素时才触发事件</li><li>passive : 事件的默认行为立即执行，无需等待事件回调执行完毕</li></ul><h3 id="_2、vue中常用的按键别名" tabindex="-1">2、Vue中常用的按键别名 <a class="header-anchor" href="#_2、vue中常用的按键别名" aria-label="Permalink to &quot;2、Vue中常用的按键别名&quot;">​</a></h3><ul><li>回车 =&gt; enter</li><li>删除 =&gt; delete (捕获“删除”和“退格”键)</li><li>退出 =&gt; esc</li><li>空格 =&gt; space</li><li>换行 =&gt; tab (特殊，必须配合keydown去使用)</li><li>上 =&gt; up</li><li>下 =&gt; down</li><li>左 =&gt; left</li><li>右 =&gt; right Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名） 系统修饰键（用法特殊）：ctrl、alt、shift、meta (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。 (2).配合keydown使用：正常触发事件。 也可以使用keyCode去指定具体的按键（不推荐） 键盘编码可能不统一 Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</li></ul><h2 id="十、计算属性" tabindex="-1">十、计算属性 <a class="header-anchor" href="#十、计算属性" aria-label="Permalink to &quot;十、计算属性&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:{</span><span style="color:#F07178;"> 				</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">fullName</span><span style="color:#89DDFF;">:{</span><span style="color:#F07178;"> 					</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">//get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值 					</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">//get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span></span>
<span class="line"><span style="color:#F07178;">					</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> 						</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get被调用了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) 						</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// console.log(this) //此处的this是vm 						</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">firstName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">lastName</span><span style="color:#F07178;"> 					</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> 					</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">//set什么时候调用? 当fullName被修改时。</span></span>
<span class="line"><span style="color:#F07178;">					</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> 						</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">set</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">) 						</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) 						</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">firstName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] 						</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">lastName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] 					</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> 				</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> 			</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 若是只有getter可简写</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">fullname</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="十一、监视属性watch" tabindex="-1">十一、监视属性watch <a class="header-anchor" href="#十一、监视属性watch" aria-label="Permalink to &quot;十一、监视属性watch&quot;">​</a></h2><ol><li>当被监视的属性变化时, 回调函数自动调用, 进行相关操作</li><li>监视的属性必须存在，才能进行监视！！若不存在，不会报错，但是没意义</li><li>监视的两种写法： (1).new Vue时传入watch配置 (2).通过vm.$watch监视</li></ol><p>深度监视： (1).Vue中的watch默认不监测对象内部值的改变（一层）。 (2).配置deep:true可以监测对象内部值改变（多层）。 备注： (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！ (2).使用watch时根据数据的具体结构，决定是否采用深度监视。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//  简写： </span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">isHot</span><span style="color:#A6ACCD;">(newValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">oldValue)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		 </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">isHot被修改了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">oldValue</span><span style="color:#89DDFF;">,this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	 </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">   vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">isHot</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">oldValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">isHot被修改了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">oldValue</span><span style="color:#89DDFF;">,this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>computed和watch之间的区别： 1.computed能完成的功能，watch都可以完成。 2.watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。 两个重要的小原则： 1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。 2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象。</p><h2 id="十二、绑定样式" tabindex="-1">十二、绑定样式 <a class="header-anchor" href="#十二、绑定样式" aria-label="Permalink to &quot;十二、绑定样式&quot;">​</a></h2><h3 id="class样式" tabindex="-1">class样式 <a class="header-anchor" href="#class样式" aria-label="Permalink to &quot;class样式&quot;">​</a></h3><ul><li>:class=&quot;xxx&quot; xxx可以是字符串、对象、数组。</li><li>字符串写法适用于：类名不确定，要动态获取。</li><li>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</li><li>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</li></ul><h3 id="style样式" tabindex="-1">style样式 <a class="header-anchor" href="#style样式" aria-label="Permalink to &quot;style样式&quot;">​</a></h3><ul><li>:style=&quot;{fontSize: xxx}&quot;其中xxx是动态值。</li><li>:style=&quot;[a,b]&quot;其中a、b是样式对象。</li></ul><h2 id="十三、条件渲染" tabindex="-1">十三、条件渲染 <a class="header-anchor" href="#十三、条件渲染" aria-label="Permalink to &quot;十三、条件渲染&quot;">​</a></h2><h3 id="v-if" tabindex="-1">v-if <a class="header-anchor" href="#v-if" aria-label="Permalink to &quot;v-if&quot;">​</a></h3><ul><li>写法： (1).v-if=&quot;表达式&quot; (2).v-else-if=&quot;表达式&quot; (3).v-else=&quot;表达式&quot;</li><li>适用于：切换频率较低的场景。</li><li>特点：不展示的DOM元素直接被移除。</li><li>注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</li></ul><h3 id="v-show" tabindex="-1">v-show <a class="header-anchor" href="#v-show" aria-label="Permalink to &quot;v-show&quot;">​</a></h3><ul><li>写法：v-show=&quot;表达式&quot;</li><li>适用于：切换频率较高的场景。</li><li>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</li><li>备注：使用v-if的时候，元素可能无法获取到，而使用v-show一定可以获取到。</li></ul><h2 id="十四、列表渲染" tabindex="-1">十四、列表渲染 <a class="header-anchor" href="#十四、列表渲染" aria-label="Permalink to &quot;十四、列表渲染&quot;">​</a></h2><p>v-for指令: 1.用于展示列表数据 2.语法：v-for=&quot;(item, index) in xxx&quot; :key=&quot;yyy&quot; 3.可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少） 面试题：react、vue中的key有什么作用？（key的内部原理）</p><ol><li><p>虚拟DOM中key的作用： key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：<br> 对比规则： (1).旧虚拟DOM中找到了与新虚拟DOM相同的key： ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！ ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</p><p>(2).旧虚拟DOM中未找到与新虚拟DOM相同的key 创建新的真实DOM，随后渲染到页面。</p></li><li><p>用index作为key可能会引发的问题： 1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作: 会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。 2. 如果结构中还包含输入类的DOM： 会产生错误DOM更新 ==&gt; 界面有问题。</p></li><li><p>开发中如何选择key?: 1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。 2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示， 使用index作为key是没有问题的。 列表过滤、列表排序</p></li></ol><h2 id="十五、vue监视数据的原理" tabindex="-1">十五、Vue监视数据的原理 <a class="header-anchor" href="#十五、vue监视数据的原理" aria-label="Permalink to &quot;十五、Vue监视数据的原理&quot;">​</a></h2><pre><code>1. vue会监视data中所有层次的数据。

2. 如何监测对象中的数据？
				通过setter实现监视，且要在new Vue时就传入要监测的数据。
					(1).对象中后追加的属性，Vue默认不做响应式处理
					(2).如需给后添加的属性做响应式，请使用如下API：
									Vue.set(target，propertyName/index，value) 或 
									vm.$set(target，propertyName/index，value)

3. 如何监测数组中的数据？
					通过包裹数组更新元素的方法实现，本质就是做了两件事：
						(1).调用原生对应的方法对数组进行更新。
						(2).重新解析模板，进而更新页面。

4.在Vue修改数组中的某个元素一定要用如下方法：
			1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()
			2.Vue.set() 或 vm.$set()

特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象
</code></pre><h2 id="十六、收集表单数据" tabindex="-1">十六、收集表单数据 <a class="header-anchor" href="#十六、收集表单数据" aria-label="Permalink to &quot;十六、收集表单数据&quot;">​</a></h2><p>若：<input type="text">，则v-model收集的是value值，用户输入的就是value值。 若：<input type="radio">，则v-model收集的是value值，且要给标签配置value值。 若：<input type="checkbox"> 1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值） 2.配置input的value属性: (1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值） (2)v-model的初始值是数组，那么收集的的就是value组成的数组 备注：v-model的三个修饰符： lazy：失去焦点再收集数据 number：输入字符串转为有效的数字 trim：输入首尾空格过滤 下拉列表、文本域</p><h2 id="十七、过滤器" tabindex="-1">十七、过滤器 <a class="header-anchor" href="#十七、过滤器" aria-label="Permalink to &quot;十七、过滤器&quot;">​</a></h2>`,46),C=s("h2",{id:"十八、内置指令",tabindex:"-1"},[a("十八、内置指令 "),s("a",{class:"header-anchor",href:"#十八、内置指令","aria-label":'Permalink to "十八、内置指令"'},"​")],-1),m=t('<h2 id="十九、自定义指令" tabindex="-1">十九、自定义指令 <a class="header-anchor" href="#十九、自定义指令" aria-label="Permalink to &quot;十九、自定义指令&quot;">​</a></h2><p>需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。 需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。 自定义指令总结： 一、定义语法： (1).局部指令： new Vue({ new Vue({ directives:{指令名:配置对象} 或 directives{指令名:回调函数} }) }) (2).全局指令： Vue.directive(指令名,配置对象) 或 Vue.directive(指令名,回调函数)</p><p>二、配置对象中常用的3个回调： (1).bind：指令与元素成功绑定时调用。 (2).inserted：指令所在元素被插入页面时调用。 (3).update：指令所在模板结构被重新解析时调用。</p><p>三、备注： 1.指令定义时不加v-，但使用时要加v-； 2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</p><h2 id="二十、生命周" tabindex="-1">二十、生命周 <a class="header-anchor" href="#二十、生命周" aria-label="Permalink to &quot;二十、生命周&quot;">​</a></h2><p>1.又名：生命周期回调函数、生命周期函数、生命周期钩子。 2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。 3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。 4.生命周期函数中的this指向是vm 或 组件实例对象。 beforeCreate,created, beforeMount,mounted, beforeUpdate,updated, beforeDestroy,destroyed, 常用的生命周期钩子： 1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。 2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。<br> 关于销毁Vue实例 1.销毁后借助Vue开发者工具看不到任何信息。 2.销毁后自定义事件会失效，但原生DOM事件依然有效。 3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</p><h2 id="二十一、非单文件组件" tabindex="-1">二十一、非单文件组件 <a class="header-anchor" href="#二十一、非单文件组件" aria-label="Permalink to &quot;二十一、非单文件组件&quot;">​</a></h2>',7),A=s("br",null,null,-1),b=s("br",null,null,-1),f=s("br",null,null,-1),x=s("br",null,null,-1),V=s("br",null,null,-1),_=s("br",null,null,-1),q=s("strong",null,"proto",-1),k=s("h2",{id:"二十二、单文件组件简单练习",tabindex:"-1"},[a("二十二、单文件组件简单练习 "),s("a",{class:"header-anchor",href:"#二十二、单文件组件简单练习","aria-label":'Permalink to "二十二、单文件组件简单练习"'},"​")],-1);function g(l,w,P,M,E,O){const n=r("school");return c(),i("div",null,[u,F,D,s("p",null,"创建vue实例，模板，"+e(l.xxx)+"中xxx为js表达式",1),h,d,s("p",null,e(l.xxx),1),v,s("p",null,"filters 定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。 语法： 1.注册过滤器：Vue.filter(name,callback) 或 new Vue{filters:{}} 2.使用过滤器："+e(l.xxx|l.过滤器名)+' 或 v-bind:属性 = "xxx | 过滤器名" 备注： 1.过滤器也可以接收额外参数、多个过滤器也可以串联 2.并没有改变原本的数据, 是产生新的对应的数据',1),C,s("p",null,"我们学过的指令： v-bind : 单向绑定解析表达式, 可简写为 :xxx v-model : 双向数据绑定 v-for : 遍历数组/对象/字符串 v-on : 绑定事件监听, 可简写为@ v-if : 条件渲染（动态控制节点是否存存在） v-else : 条件渲染（动态控制节点是否存存在） v-show : 条件渲染 (动态控制节点是否展示) v-text指令： 1.作用：向其所在的节点中渲染文本内容。 2.与插值语法的区别：v-text会替换掉节点中的内容，"+e(l.xx)+"则不会。v-text不会渲染标签 v-html指令： 1.作用：向指定节点中渲染包含html结构的内容。 2.与插值语法的区别： (1).v-html会替换掉节点中所有的内容，"+e(l.xx)+"则不会。 (2).v-html可以识别html结构。 3.严重注意：v-html有安全性问题！！！！ (1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。 (2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！ v-cloak指令（没有值）： 1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。 2.使用css配合v-cloak可以解决网速慢时页面展示出"+e(l.xxx)+"的问题。 v-cloak指令（没有值）： 1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。 2.使用css配合v-cloak可以解决网速慢时页面展示出"+e(l.xxx)+"的问题。 v-once指令： 1.v-once所在节点在初次动态渲染后，就视为静态内容了。 2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。 v-pre指令： 1.跳过其所在节点的编译过程。 2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。",1),m,s("p",null,[a("Vue中使用组件的三大步骤： 一、定义组件(创建组件) 二、注册组件 三、使用组件(写组件标签) 一、如何定义一个组件？ 使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别； 区别如下： 1.el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。 2.data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。 备注：使用template可以配置组件结构。 二、如何注册组件？ 1.局部注册：靠new Vue的时候传入components选项 2.全局注册：靠Vue.component('组件名',组件) 三、编写组件标签： "),o(n),a(" 几个注意点： 1.关于组件名: 一个单词组成： 第一种写法(首字母小写)：school 第二种写法(首字母大写)：School 多个单词组成： 第一种写法(kebab-case命名)：my-school 第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持) 备注： (1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。 (2).可以使用name配置项指定组件在开发者工具中呈现的名字。"),A,a(" 2.关于组件标签: 第一种写法："),o(n),a(" 第二种写法："),o(n),a(" 备注：不用使用脚手架时，"),o(n),a("会导致后续组件不能渲染。"),b,a(" 3.一个简写方式： const school = Vue.extend(options) 可简写为：const school = options 关于VueComponent： 1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.exte的。"),f,a(" 2.我们只需要写"),o(n),a("或"),o(n),a("，Vue解析时会帮我们创建school组件的实例对象， 即Vue帮我们执行的：new VueComponent(options)。"),x,a(" 3.特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！"),V,a(" 4.关于this指向： (1).组件配置中： data函数、methods中的函数、watch中的函数、computed中的函数 它们的th【VueComponent实例对象】。 (2).new Vue(options)配置中： data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vu象】。"),_,a(" 5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。 Vue的实例对象，以后简称vm。 一个重要的内置关系： VueComponent.prototype."),q,a(" === Vue.prototype 为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。")]),k])}const S=p(y,[["render",g]]);export{N as __pageData,S as default};
